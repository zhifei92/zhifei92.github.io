I"l%<p>概述
入正题之前得先说下ES，Elasticsearch 是一个分布式、可扩展、实时的搜索与数据分析引擎。 它能从项目一开始就赋予你的数据以搜索、分析和探索的能力。我们容器服务的日志现在大多数都入到了qbus，然后可以用es消费，通过kibana方便的查看日志。但是负责es的同事和我们都没有支持日志告警，目前是一个短板。X-Pack提供了报警组件Alert，但是这个功能是需要付费，ElastAlert能够完美替代Alert提供的所有功能。ElastAlert目前有6k+star，维护较好很受欢迎，使用python编写，V0.2.0以后使用python3，python2不再维护，以致在虚机物理机部署的坑很多，最终也是一容器的方式成功搭建。公司es之后要升级到7.2版本，ElastAlertV0.2.1（最新版本）才对es7支持的很好，elastalert-kibana-plugin最新版本才支持kibana7。</p>

<p>相关组件
告警服务ElastAlert，版本V0.2.1</p>

<p>展示插件elastalert-kibana-plugin，kibana安装这个组件后，用户可以通过kibana管理告警规则（增、删、改、查，及测试）。</p>

<p>api服务ElastAlert  server，暴露restf api提供管理告警规则的能力，与elastalert-kibana-plugin配合使用。这个服务启动时同时启动ElastAlert。</p>

<p>elastalert-kibana-plugin对ES6.3开始提供支持，公司目前使用的是ES6.2，之后要升级到ES7，所以ElastAlert用V0.2.1，ElastAlert  server 3.0.0-beta.0,elastalert-kibana-plugin 1.1.0。</p>

<p>搭建
ElastAlertV0.2.1需要python3，目前我们使用linux内核都会默认装python2，安装python3后，使用混合环境安装ElastAlert 很多依赖装不成功，亦或装成功后模块有找不到，所以最终打算使用docker multi stage build方式构建ElastAlert  server镜像，以容器的方式启动。</p>

<p>网上提供了ElastAlert  server镜像构建方式，但很久不维护，还是使用python2构建的老的版本。我们需要重新构建</p>

<p>1、git clone https://github.com/bitsensor/elastalert.git&amp;&amp;cdelastalert  修改 Dockerfile</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
FROM python:3.6-alpine as pyea

ENV ELASTALERT_VERSION=v0.2.1

# URL from which to download Elastalert.

ENV ELASTALERT_URL=https://github.com/Yelp/elastalert/archive/$ELASTALERT_VERSION.zip

# Elastalert home directory full path.

ENV ELASTALERT_HOME /opt/elastalert

WORKDIR /opt

RUN apk add --update --no-cache ca-certificates openssl-dev openssl libffi-dev gcc musl-dev wget &amp;&amp; \

# Download and unpack Elastalert.

    wget -O elastalert.zip "${ELASTALERT_URL}" &amp;&amp; \

    unzip elastalert.zip &amp;&amp; \

    rm elastalert.zip &amp;&amp; \

    mv e* "${ELASTALERT_HOME}"

WORKDIR "${ELASTALERT_HOME}"

# Install Elastalert.

# see: https://github.com/Yelp/elastalert/issues/1654

RUN python setup.py install &amp;&amp; \

    pip install -r requirements.txt &amp;&amp; \

    pip install elasticsearch==7.0.0

FROM node:alpine

#LABEL maintainer="BitSensor &lt;dev@bitsensor.io&gt;"

# Set timezone for this container

ENV TZ Etc/UTC



RUN apk add --update --no-cache curl tzdata python3 make libmagic

COPY --from=pyea /usr/local/lib/python3.6/site-packages /usr/lib/python3.6/site-packages

#COPY --from=pyea /usr/lib/python3.6/site-packages /usr/lib/python3.6/site-packages

COPY --from=pyea /opt/elastalert /opt/elastalert

COPY --from=pyea /usr/local/bin/elastalert* /usr/bin/

WORKDIR /opt/elastalert-server

COPY . /opt/elastalert-server

#RUN mkdir -p /usr/local/lib/python3.7 /usr/lib/python3.7 &amp;&amp; \

#    cp /usr/local/lib/python3.6/site-packages /usr/local/lib/python3.7/site-packages\

#    cp /usr/local/lib/python3.6/site-packages /usr/lib/python3.7

RUN ln -s /usr/bin/python3 /usr/bin/python

RUN npm install --production --quiet

COPY config/elastalert.yaml /opt/elastalert/config.yaml

COPY config/elastalert-test.yaml /opt/elastalert/config-test.yaml

COPY config/config.json config/config.json

COPY rule_templates/ /opt/elastalert/rule_templates

COPY elastalert_modules/ /opt/elastalert/elastalert_modules

# Add default rules directory

# Set permission as unpriviledged user (1000:1000), compatible with Kubernetes

RUN mkdir -p /opt/elastalert/rules/ /opt/elastalert/server_data/tests/ \

    &amp;&amp; chown -R node:node /opt

USER node

EXPOSE 3030

ENTRYPOINT ["npm", "start"]

</code></pre></div></div>

<p>2、docker build –no-cache  -t   image-name  .</p>

<p>注：build的时候可能会报layer找不到的错误，再build一次就可以了（目前不知道什么原因）</p>

<p>3、运行</p>

<p>docker run -d -p 3030:3030 -p 3333:3333 \    -v<code class="highlighter-rouge">pwd</code>/config/elastalert.yaml:/opt/elastalert/config.yaml \    -v<code class="highlighter-rouge">pwd</code>/config/elastalert-test.yaml:/opt/elastalert/config-test.yaml \    -v<code class="highlighter-rouge">pwd</code>/config/config.json:/opt/elastalert-server/config/config.json \    -v<code class="highlighter-rouge">pwd</code>/rules:/opt/elastalert/rules \    -v<code class="highlighter-rouge">pwd</code>/rule_templates:/opt/elastalert/rule_templates \    –net=”host”\    –name elastalert images-name</p>

<p>4、配置文件</p>

<p>主要的配置文件有：</p>

<p>elastalert.yaml：elastalert配置文件，es相关配置</p>

<h1 id="this-is-the-folder-that-contains-the-rule-yaml-files">This is the folder that contains the rule yaml files</h1>

<h1 id="any-yaml-file-will-be-loaded-as-a-rule">Any .yaml file will be loaded as a rule</h1>

<p>rules_folder: rules</p>

<h1 id="how-often-elastalert-will-query-elasticsearch">How often ElastAlert will query Elasticsearch</h1>

<h1 id="the-unit-can-be-anything-from-weeks-to-seconds">The unit can be anything from weeks to seconds</h1>

<p>run_every:</p>

<p>minutes: 1</p>

<h1 id="elastalert-will-buffer-results-from-the-most-recent">ElastAlert will buffer results from the most recent</h1>

<h1 id="period-of-time-in-case-some-log-sources-are-not-in-real-time">period of time, in case some log sources are not in real time</h1>

<p>buffer_time:</p>

<p>minutes: 15</p>

<h1 id="the-elasticsearch-hostname-for-metadata-writeback">The Elasticsearch hostname for metadata writeback</h1>

<h1 id="note-that-every-rule-can-have-its-own-elasticsearch-host">Note that every rule can have its own Elasticsearch host</h1>

<p>es_host: 10.216.6.76</p>

<h1 id="the-elasticsearch-port">The Elasticsearch port</h1>

<p>es_port: 9200</p>

<p>es_username: tfmaq_w</p>

<p>es_password: 4152adc2a11cb182c014bc9521ab46e0</p>

<h1 id="the-index-on-es_host-which-is-used-for-metadata-storage">The index on es_host which is used for metadata storage</h1>

<h1 id="this-can-be-a-unmapped-index-but-it-is-recommended-that-you-run">This can be a unmapped index, but it is recommended that you run</h1>

<h1 id="elastalert-create-index-to-set-a-mapping">elastalert-create-index to set a mapping</h1>

<p>writeback_index: hihi_test</p>

<p>#writeback_alias: elastalert_alerts</p>

<h1 id="if-an-alert-fails-for-some-reason-elastalert-will-retry">If an alert fails for some reason, ElastAlert will retry</h1>

<h1 id="sending-the-alert-until-this-time-period-has-elapsed">sending the alert until this time period has elapsed</h1>

<p>alert_time_limit:</p>

<p>days: 2</p>

<p>config.json：elastalert server的配置文件</p>

<p>{</p>

<p>“appName”: “elastalert-server”,</p>

<p>“port”: 3030,</p>

<p>“wsport”: 3333,</p>

<p>“elastalertPath”: “/opt/elastalert”,</p>

<p>“verbose”: false,</p>

<p>“es_debug”: false,</p>

<p>“debug”: false,</p>

<p>“rulesPath”: {</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"relative": true,

"path": "/rules" # 通过kibana插件创建的配置文件都存在这
</code></pre></div></div>

<p>},</p>

<p>“templatesPath”: {</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"relative": true,

"path": "/rule_templates"
</code></pre></div></div>

<p>},</p>

<p>“es_host”: “10.216.6.76”,      # es ip</p>

<p>“es_port”: 9200,               # es 端口</p>

<p>“writeback_index”: “hihi_test” # 监控的esindex</p>

<p>}</p>

<p>rules：所有报警规则的配置文件都存在着</p>

<p>es_host: 10.216.6.76</p>

<p>es_port: 9200</p>

<p>es_username: tfmaq_w</p>

<p>es_password: 4152adc2a11cb182c014bc9521ab46e0</p>

<p>name: Example frequency rule 2</p>

<p>type: frequency</p>

<p>index: hihi-test</p>

<p>num_events: 5</p>

<p>timeframe:</p>

<p>hours: 4</p>

<p>filter:</p>

<ul>
  <li>
    <p>query:</p>

    <p>query_string:</p>

    <p>query: “type:access”</p>

    <p>query: “message:error”</p>
  </li>
</ul>

<p>alert:</p>

<ul>
  <li>“email”</li>
</ul>

<p>email:</p>

<ul>
  <li>“zhangzhifei@xxx.cn”</li>
</ul>

<p>rule_templates是模板存放地方，</p>

<p>elastalert-test.yaml测试配置文件。这两个一般都不用</p>

<p>演示</p>

<p>kibana插件如下：</p>

<p>custom_frequency是启服务之前创建的配置文件，test和test2是通过kibana dashboard创建</p>

<p>用户可以通过“创建”-“测试”-“保存”这一流程新建alert rules 和我们的hulk容器上的自定义告警流程差不多</p>

<p>参考：
https://github.com/bitsensor/elastalert</p>

<p>https://github.com/bitsensor/elastalert-kibana-plugin</p>

<p>https://github.com/Yelp/elastalert</p>

<p>https://elastalert.readthedocs.io/en/latest/</p>

:ET